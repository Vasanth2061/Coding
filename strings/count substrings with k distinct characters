Problem statement
You are given a string 'str' of lowercase alphabets and an integer 'k' .



Your task is to return the count all the possible substrings that have exactly 'k' distinct characters.



For example:


Explain
'str' = abcad and 'k' = 2. 

We can see that the substrings {ab, bc, ca, ad} are the only substrings with 2 distinct characters. 

Therefore, the answer will be 4.    
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1 :
aacfssa    
3
Sample Output 1 :
5    
Explanation of The Sample Input 1:
Given 'str' = “aacfssa”. We can see that the substrings with only 3 distinct characters are {aacf, acf, cfs, cfss, fssa}. 

Therefore, the answer will be 5.
Sample Input 2 :
qffds
4
Sample Output 2 :
1
Constraints:
1 <= |str| <= 10^5
1 <= k <= 26

Time Limit: 1 second

int solve(string s,int k){
    int l=0,r=0;
    int count=0,distinct=0;
    int n=s.size();
    unordered_map<char,int> mp;
    while(r<n){
        if(mp[s[r]]==0)
            distinct++;
        mp[s[r]]++;
        while(distinct>k){
            mp[s[l]]--;
            if(mp[s[l]]==0)
                distinct--;
            l++;
        }
        count+=r-l+1;
        r++;
    }
    return count;
}
int countSubStrings(string str, int k) 
{
    return solve(str,k)-solve(str,k-1);
}


