Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

 

Example 1:


Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 6
Explanation: The maximal rectangle is shown in the above picture.
Example 2:

Input: matrix = [["0"]]
Output: 0
Example 3:

Input: matrix = [["1"]]
Output: 1
 

Constraints:

rows == matrix.length
cols == matrix[i].length
1 <= row, cols <= 200
matrix[i][j] is '0' or '1'.

class Solution {
public:
    int f(vector<int> ans,int n){
        vector<int> left(n,0);
        vector<int> right(n,n-1);
        stack<int> st;
        st.push(0);
        for(int i=1;i<n;i++){
            while(!st.empty() and ans[st.top()]>=ans[i])
                st.pop();
            if(!st.empty())
                left[i]=st.top()+1;
            else
                left[i]=0;
            st.push(i);
        }
        while(!st.empty())
            st.pop();
        st.push(n-1);
        for(int i=n-2;i>=0;i--){
            while(!st.empty() and ans[st.top()]>=ans[i])
                st.pop();
            if(!st.empty())
                right[i]=st.top()-1;
            else
                right[i]=n-1;
            st.push(i);
        }
        int maxi=0;
        for(int i=0;i<n;i++){
            int num=(right[i]-left[i]+1)*ans[i];
            maxi=max(maxi,num);
        }
        return maxi;
    }
    int maximalRectangle(vector<vector<char>>& matrix) {
        int n=matrix[0].size();
        int m=matrix.size();
        if(m==1){
            int mnum=0;
            int count=0;
            for(int i=0;i<n;i++){
                if(matrix[0][i]=='1')
                    count++;
                else
                    count=0;
                mnum=max(mnum,count);
            }
            return mnum;
        }
        vector<int> ans(n,0);
        int maxi=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(matrix[i][j]=='1')
                    ans[j]+=1;
                else
                    ans[j]=0;
            }
            int no=f(ans,n);
            maxi=max(maxi,no);
        }
        return maxi;
    }
};
