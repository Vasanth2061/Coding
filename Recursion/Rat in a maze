Problem statement
You are given a N*N maze with a rat placed at 'mat[0][0]'. Find all paths that rat can follow to reach its destination i.e. mat[N-1][N-1]. The directions in which the rat can move are 'U'(up), 'D'(down), 'L' (left), 'R' (right).



In the given maze, each cell can have a value of either 0 or 1. Cells with a value of 0 are considered blocked, which means the rat cannot enter or traverse through them. On the other hand, cells with a value of 1 are open, indicating that the rat is allowed to enter and move through those cells.



Example:

Explain
mat:{{1, 0, 0, 0},
     {1, 1, 0, 1}, 
     {1, 1, 0, 0},
     {0, 1, 1, 1}}

All possible paths are:
DDRDRR (in red)
DRDDRR (in green)

Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1 :
3
1 1 1
1 0 1
1 1 1
Sample Output 1 :
DDRR
RRDD
Explanation of Sample Input 1:
Only 2 path is possible.

Sample Input 2 :
2
1 1
1 0
Sample Output 2 :
-1
Explanation of Sample Input 2:
No path exists.
Constraints:
2 <= N <= 5
0 <= mati][j] <=1

Time Limit: 1sec

void f(int i,int j,string s, vector<string> &ans,vector<vector<int>> mat,int n){
    if(i==n-1 and j==n-1 and mat[i][j]==1){
        ans.push_back(s);
        return;
    }
    if(i<0 or j<0 or i>=n or j>=n or mat[i][j]==0)
        return;
    mat[i][j]=0;
    f(i-1,j,s+"U",ans,mat,n);
    f(i+1,j,s+"D",ans,mat,n);
    f(i,j+1,s+"R",ans,mat,n);
    f(i,j-1,s+"L",ans,mat,n);
    mat[i][j]=1;
}
vector<string> ratMaze(vector<vector<int>> &mat) {
    // Write your code here.
    vector<string> ans;
    int n=mat.size();
    f(0,0,"",ans,mat,n);
    if(ans.size()==0){
        ans.push_back("-1");
    }
    return ans;
}
