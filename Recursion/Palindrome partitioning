Given a string s, partition s such that every 
substring
 of the partition is a 
palindrome
. Return all possible palindrome partitioning of s.

 

Example 1:

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]
Example 2:

Input: s = "a"
Output: [["a"]]
 

Constraints:

1 <= s.length <= 16
s contains only lowercase English letters.


class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> ans;
        vector<string> path;
        f(0,s,ans,path);
        return ans;
    }
    void f(int index,string s,vector<vector<string>> &ans,vector<string> &path){
        if(index==s.size()){
            ans.push_back(path);
            return;
        }
        for(int i=index;i<s.size();i++){
            if(ispalindrome(s.substr(index,i-index+1))){
                path.push_back(s.substr(index,i-index+1));
                f(i+1,s,ans,path);
                path.pop_back();
            }
        }
    }
    bool ispalindrome(string s){
        int start=0,end=s.size()-1;
        while(start<=end){
            if(s[start]!=s[end])
                return false;
            start++;
            end--;
        }
        return true;
    }
};
