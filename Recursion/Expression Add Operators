Given a string num that contains only digits and an integer target, return all possibilities to insert the binary operators '+', '-', and/or '*' between the digits of num so that the resultant expression evaluates to the target value.

Note that operands in the returned expressions should not contain leading zeros.

 

Example 1:

Input: num = "123", target = 6
Output: ["1*2*3","1+2+3"]
Explanation: Both "1*2*3" and "1+2+3" evaluate to 6.
Example 2:

Input: num = "232", target = 8
Output: ["2*3+2","2+3*2"]
Explanation: Both "2*3+2" and "2+3*2" evaluate to 8.
Example 3:

Input: num = "3456237490", target = 9191
Output: []
Explanation: There are no expressions that can be created from "3456237490" to evaluate to 9191.
 

Constraints:

1 <= num.length <= 10
num consists of only digits.
-231 <= target <= 231 - 1

class Solution {
public:
    void f(int i,long sum,long prev,int target,string path, string num,vector<string> &ans){
        if(i==num.size()){
            if(sum==target)
                ans.push_back(path);
            return;
        }
        for(int j=i;j<num.size();j++){
            if(j>i and num[i]=='0')
                break;
            long number=stol(num.substr(i,j-i+1));
            string temppath=num.substr(i,j-i+1);
            if(i==0)
                f(j+1,number,number,target,temppath,num,ans);
            else{
                f(j+1,sum+number,number,target,path+"+"+temppath,num,ans);
                f(j+1,sum-number,-number,target,path+"-"+temppath,num,ans);
                f(j+1,sum-prev+(prev*number),prev*number,target,path+"*"+temppath,num,ans);
            }
        }
    }
    vector<string> addOperators(string num, int target) {
        vector<string> ans;
        f(0,0,0,target,"",num,ans);
        return ans;
    }
};
