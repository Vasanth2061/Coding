Problem statement
You are given an undirected graph as an adjacency matrix consisting of 'v' vertices and an integer 'm'.



You need to return 'YES' if you can color the graph using at most 'm' colors so that no two adjacent vertices are the same. Else, return 'NO'.



For example:
Input:
If the given adjacency matrix is:
[0 1 0]
[1 0 1]
[0 1 0] and 'm' = 3.


Explain
Output: YES

Explanation:
The given adjacency matrix tells us that 1 is connected to 2 and 2 is connected to 3. We can use three different colors and color all three nodes.
Hence we return true.


Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
3 2
0 1 0
1 0 1
0 1 0
Sample Output 1:
YES
Explanation of Input 1:
The adjacency matrix tells us that 1 is connected to 2, and 2 is connected to 3. We can see that a minimum of 2 colors would be needed to color the graph. So it is possible to color the graph in this case.
Sample Input 2:
3 1
0 1 0
1 0 1
0 1 0
Sample Output 2
NO
Constraints:
1 ≤ v ≤ 20
1 ≤ m ≤ v

Time Limit: 1 sec 

bool ispossible(int node,vector<vector<int>> mat,int m,int n,vector<int> col,int c){
    for(int k=0;k<n;k++){
        if(k!=node and mat[node][k]==1 and col[k]==c)
            return false;
    }
    return true;
}
bool f(int node,vector<vector<int>> mat,int m,int n,vector<int> &col){
    if(node==n)
        return true;
    for(int i=1;i<=m;i++){
        if(ispossible(node,mat,m,n,col,i)){
            col[node]=i;
            if(f(node+1,mat,m,n,col))
                return true;
            col[node]=0;
        }
    }
    return false;
}
string graphColoring(vector<vector<int>> &mat, int m) {
    // Write your code here
    int n=mat.size();
    vector<int> col(n,0);
    if(f(0,mat,m,n,col))
        return "YES";
    else    
        return "NO";
}
